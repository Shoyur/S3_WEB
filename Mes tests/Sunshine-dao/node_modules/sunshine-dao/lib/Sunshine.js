"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sunshine = void 0;
const mongodb_1 = require("mongodb");
const events_1 = require("events");
/**
 *  Sunshine DAO Connector
 *
 *  @ Michael Hasler
 */
class Sunshine {
    static setEncryptionKey(key) {
        Sunshine.properties.encryptionKey = key;
    }
    static getEncryptionKey() {
        return Sunshine.properties.encryptionKey;
    }
    static connectURI(uri, encryptionKey) {
        return new Promise((resolve, reject) => {
            Sunshine.properties = {};
            const options = {
                useUnifiedTopology: true,
                useNewUrlParser: true
            };
            mongodb_1.MongoClient.connect(uri, options, function (err, mongoClient) {
                if (err) {
                    reject(err);
                    return;
                }
                Sunshine.mongoClient = mongoClient;
                // @ts-ignore
                Sunshine.db = mongoClient.db(mongoClient.s.options.database);
                Sunshine.isConnected = true;
                if (encryptionKey)
                    Sunshine.properties.encryptionKey = encryptionKey;
                resolve(true);
            });
        });
    }
    static connect(hostname, username, password, database, encryptionKey) {
        Sunshine.properties = {};
        let URI = "mongodb://";
        if (username && username.length != 0) {
            URI += username + ":" + password + "@";
        }
        URI += hostname + "/" + database;
        return this.connectURI(URI, encryptionKey);
    }
    static injectConnection(db) {
        this.db = db;
        this.isConnected = true;
    }
    static on(event, callback) {
        this.eventEmitter.on(event, callback);
    }
    static event(name, payload) {
        this.eventEmitter.emit(name, payload);
    }
    static getConnection() {
        if (!Sunshine.isConnected) {
            throw new Error("No connection available :(");
        }
        return Sunshine.db;
    }
    static async disconnect() {
        await this.mongoClient.close();
        return true;
    }
}
exports.Sunshine = Sunshine;
Sunshine.isConnected = false;
Sunshine.eventEmitter = new events_1.EventEmitter();
